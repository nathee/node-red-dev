[
    {
        "id": "ed44bac9.6378a",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a226a965c326df1a",
        "type": "tab",
        "label": "RTSP",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "e00b414dd22f5f63",
        "type": "tab",
        "label": "NVR",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e16e06ca.f38438",
        "type": "ui_group",
        "name": "Frame Statistics",
        "tab": "7af2d9c8.0a9148",
        "order": 2,
        "disp": true,
        "width": "6"
    },
    {
        "id": "675036dd.603328",
        "type": "ui_group",
        "name": "Frame Grab",
        "tab": "7af2d9c8.0a9148",
        "order": 1,
        "disp": true,
        "width": "8",
        "collapse": false
    },
    {
        "id": "7af2d9c8.0a9148",
        "type": "ui_tab",
        "name": "RTSP",
        "icon": "dashboard",
        "order": 13,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cb67921.cf4df7",
        "type": "ui_group",
        "name": "Video Capture",
        "tab": "7af2d9c8.0a9148",
        "order": 3,
        "disp": true,
        "width": "6"
    },
    {
        "id": "984422e9.d6d96",
        "type": "ui_group",
        "name": "Video Statistics",
        "tab": "7af2d9c8.0a9148",
        "order": 4,
        "disp": true,
        "width": "6"
    },
    {
        "id": "0ea79476be5c8420",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "32942f12.deac28",
        "type": "tfjs-tutorial-node",
        "z": "ed44bac9.6378a",
        "name": "tfjs tutorial node",
        "modelUrl": "https://tfhub.dev/tensorflow/tfjs-model/ssdlite_mobilenet_v2/1/default/1",
        "fromHub": "checked",
        "x": 497,
        "y": 205,
        "wires": [
            [
                "b2612289.039f4"
            ]
        ]
    },
    {
        "id": "b2612289.039f4",
        "type": "debug",
        "z": "ed44bac9.6378a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 699.5,
        "y": 205,
        "wires": []
    },
    {
        "id": "dc828fcd.0f4f3",
        "type": "file in",
        "z": "ed44bac9.6378a",
        "name": "Pilots.jpg",
        "filename": "/Users/va/Desktop/max.test/test-images/Pilots.jpg",
        "format": "",
        "chunk": false,
        "sendError": false,
        "encoding": "none",
        "x": 299,
        "y": 206,
        "wires": [
            [
                "32942f12.deac28"
            ]
        ]
    },
    {
        "id": "a1533ba1.954df",
        "type": "inject",
        "z": "ed44bac9.6378a",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 126.5,
        "y": 206,
        "wires": [
            [
                "dc828fcd.0f4f3"
            ]
        ]
    },
    {
        "id": "c0eaa1e3.932c2",
        "type": "inject",
        "z": "a226a965c326df1a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 300,
        "wires": [
            [
                "ed28c584.34a4a8"
            ]
        ]
    },
    {
        "id": "31b99d4b.895742",
        "type": "exec",
        "z": "a226a965c326df1a",
        "command": "ffmpeg -y -i rtsp://admin:Root@1234@10.4.0.222:554 -vframes 1 -f image2pipe -vcodec png -",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Grab a frame->stdout",
        "x": 746.4999923706055,
        "y": 258.25,
        "wires": [
            [
                "2d96cf3d.0dffe"
            ],
            [],
            []
        ]
    },
    {
        "id": "2f7c77bd.2eeae8",
        "type": "function",
        "z": "a226a965c326df1a",
        "name": "Statistics",
        "func": "var now = new Date();\nvar stat = context.get(\"stat\");\nif (stat===undefined) {\n    // Initialize the object in case NR restart\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n}\nif (msg.topic===\"reset\") {\n    // Reset message was received: reset statistics\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n} else {\n    // Update statistics\n    stat.count++;\n    if (msg.payload.code===0) {\n        stat.success++;\n    }    \n    stat.rate=stat.success/stat.count;\n    stat.last=now;\n}\n\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\nmsg.formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\nmsg.success = stat.success;\nmsg.rate = Math.floor(stat.rate*100);\n\nnode.status({fill:\"blue\",shape:\"ring\",text:\"Frames: \"+msg.success+\" | \"+msg.rate+\"% | Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n\n// Saving data in the context\ncontext.set(\"stat\",stat);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 927.9999847412109,
        "y": 450.25,
        "wires": [
            [
                "122d531a.410bcd",
                "47913bc9.420b84",
                "5f987014.e8cba"
            ]
        ]
    },
    {
        "id": "b1f8f75e.c82c88",
        "type": "inject",
        "z": "a226a965c326df1a",
        "name": "Reset stat",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "reset",
                "vt": "string"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 440,
        "wires": [
            [
                "99bfd7f8.6e8f78"
            ]
        ]
    },
    {
        "id": "122d531a.410bcd",
        "type": "ui_text",
        "z": "a226a965c326df1a",
        "group": "e16e06ca.f38438",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Last time",
        "label": "Last grab",
        "format": "{{msg.formattedtime}}",
        "layout": "row-spread",
        "x": 1129.0000686645508,
        "y": 370.64999198913574,
        "wires": []
    },
    {
        "id": "47913bc9.420b84",
        "type": "ui_text",
        "z": "a226a965c326df1a",
        "group": "e16e06ca.f38438",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Frame count",
        "label": "Frames grabbed",
        "format": "{{msg.success}}",
        "layout": "row-spread",
        "x": 1138.899974822998,
        "y": 406.4499807357788,
        "wires": []
    },
    {
        "id": "5f987014.e8cba",
        "type": "ui_text",
        "z": "a226a965c326df1a",
        "group": "e16e06ca.f38438",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Success rate",
        "label": "Success rate",
        "format": "{{msg.rate}} %",
        "layout": "row-spread",
        "x": 1139.8999481201172,
        "y": 444.4499740600586,
        "wires": []
    },
    {
        "id": "3bccc648.4f364a",
        "type": "ui_button",
        "z": "a226a965c326df1a",
        "name": "Refresh",
        "group": "675036dd.603328",
        "order": 3,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh image",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 320,
        "y": 500,
        "wires": [
            [
                "459f7922.af9ee8"
            ]
        ]
    },
    {
        "id": "14f4f2e2.2bf82d",
        "type": "comment",
        "z": "a226a965c326df1a",
        "name": "Frame grabber",
        "info": "This section of the flow is responsible for \ngrabbing a single out of the RTSP feed of the IP\nCamera. It uses avconv to do that which is part\nof the libav-tools for raspberry pi.\n\nThe trigger can be an inject, or a UI button.\nThe statistic node keeps a track of the number of\ngrabbed frames and the success rate (when the\nvideo conversion/grabbing was successful). The \nStatistic node also has a reset input which can \nbe used to periodically reset the stats (e.g.\ndaily, weekly).\n\nI directed the second output of the Exec node to\na file, as the output of the avconv is usually \nquite long and if there are errors you don't\nsee the entire output in the debug window, so in\nthat case just open to output and see what the issue\nis.",
        "x": 308.62501525878906,
        "y": 204.00000762939453,
        "wires": []
    },
    {
        "id": "ed28c584.34a4a8",
        "type": "change",
        "z": "a226a965c326df1a",
        "name": "Set filename",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "D:/Sources/dev/images/grab.jpg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 498,
        "y": 313,
        "wires": [
            [
                "31b99d4b.895742",
                "9ce138d8.f118c8"
            ]
        ]
    },
    {
        "id": "6eba2f2f.5e0f",
        "type": "template",
        "z": "a226a965c326df1a",
        "name": "",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<img width=\"320px\" height=\"200px\" src=\"data:image/jpg;base64,{{{payload}}}\">",
        "output": "str",
        "x": 939.9999961853027,
        "y": 317.25000190734863,
        "wires": [
            [
                "dd3172bd.6a821"
            ]
        ]
    },
    {
        "id": "dd3172bd.6a821",
        "type": "ui_template",
        "z": "a226a965c326df1a",
        "group": "675036dd.603328",
        "name": "",
        "order": 1,
        "width": "6",
        "height": "5",
        "format": "<div ng-bind-html=\"msg.payload\"></div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "templateScope": "local",
        "x": 1126,
        "y": 330.7500009536743,
        "wires": [
            []
        ]
    },
    {
        "id": "2d96cf3d.0dffe",
        "type": "base64",
        "z": "a226a965c326df1a",
        "name": "",
        "action": "str",
        "property": "payload",
        "x": 960,
        "y": 240,
        "wires": [
            [
                "6eba2f2f.5e0f"
            ]
        ]
    },
    {
        "id": "9ce138d8.f118c8",
        "type": "exec",
        "z": "a226a965c326df1a",
        "command": "ffmpeg -y -i rtsp://admin:Root@1234@10.4.0.222:554 -vframes 1 -qscale:v 2",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Grab a frame -> jpg",
        "x": 737.9999847412109,
        "y": 375.25,
        "wires": [
            [],
            [],
            [
                "2f7c77bd.2eeae8"
            ]
        ]
    },
    {
        "id": "a5e46029.81ba4",
        "type": "watch",
        "z": "a226a965c326df1a",
        "name": "",
        "files": "D:/Sources/dev/images/grab.jpg",
        "recursive": "",
        "x": 840,
        "y": 560,
        "wires": [
            [
                "7081ec93.98cfa4"
            ]
        ]
    },
    {
        "id": "7081ec93.98cfa4",
        "type": "ui_text",
        "z": "a226a965c326df1a",
        "group": "675036dd.603328",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "File Size",
        "label": "grab.jpg",
        "format": "{{msg.size}} kb",
        "layout": "row-spread",
        "x": 1140,
        "y": 560,
        "wires": []
    },
    {
        "id": "459f7922.af9ee8",
        "type": "function",
        "z": "a226a965c326df1a",
        "name": "Frame grab",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store\";                                        // Flag to store this image in the DB\nmsg.type = \"timelapse\";                                     // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 500,
        "wires": [
            [
                "9ce138d8.f118c8",
                "54d35cc4.46d474"
            ]
        ]
    },
    {
        "id": "54d35cc4.46d474",
        "type": "ui_text_input",
        "z": "a226a965c326df1a",
        "name": "",
        "label": "Snapshot",
        "tooltip": "",
        "group": "675036dd.603328",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "",
        "x": 1130,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "31689e41.17fd82",
        "type": "ui_button",
        "z": "a226a965c326df1a",
        "name": "Reset",
        "group": "e16e06ca.f38438",
        "order": 4,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Reset",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 310,
        "y": 400,
        "wires": [
            [
                "99bfd7f8.6e8f78"
            ]
        ]
    },
    {
        "id": "99bfd7f8.6e8f78",
        "type": "function",
        "z": "a226a965c326df1a",
        "name": "Reset",
        "func": "msg.topic = 'reset';\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 690,
        "y": 460,
        "wires": [
            [
                "2f7c77bd.2eeae8"
            ]
        ]
    },
    {
        "id": "ab2f48b51518962d",
        "type": "debug",
        "z": "e00b414dd22f5f63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 770,
        "y": 160,
        "wires": []
    },
    {
        "id": "81031827cd307af0",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 140,
        "wires": [
            [
                "fe26da3894e710ee"
            ]
        ]
    },
    {
        "id": "8ce13d405dce0ff5",
        "type": "exec",
        "z": "e00b414dd22f5f63",
        "command": "ffmpeg -y -i rtsp://admin:Root@1234@10.4.0.222:554 -frames 1 -qscale 1 -f image2 ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Grab a frame",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "85e0637de6e67ac2",
                "51875644576c8737"
            ],
            [
                "10cb1e5a7f28533c"
            ],
            [
                "ab2f48b51518962d",
                "e726fd8cc0685c9b"
            ]
        ]
    },
    {
        "id": "85e0637de6e67ac2",
        "type": "ui_template",
        "z": "e00b414dd22f5f63",
        "group": "675036dd.603328",
        "name": "Static image",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div height=\"210\" style=\"height: 210px;\">\n<img src=\"grab.jpg\"/ width=\"280\"><br/>\n<a href=\"grab.jpg\" target=\"_blank\">Full screen</a>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 790,
        "y": 40,
        "wires": [
            []
        ]
    },
    {
        "id": "51875644576c8737",
        "type": "debug",
        "z": "e00b414dd22f5f63",
        "name": "",
        "active": false,
        "console": "false",
        "complete": "true",
        "x": 770,
        "y": 80,
        "wires": []
    },
    {
        "id": "10cb1e5a7f28533c",
        "type": "file",
        "z": "e00b414dd22f5f63",
        "name": "",
        "filename": "avconv.out",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 830,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "e726fd8cc0685c9b",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Statistics",
        "func": "var now = new Date();\nvar stat = context.get(\"stat\");\nif (stat===undefined) {\n    // Initialize the object in case NR restart\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n}\nif (msg.topic===\"reset\") {\n    // Reset message was received: reset statistics\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n} else {\n    // Update statistics\n    stat.count++;\n    if (msg.payload.code===0) {\n        stat.success++;\n    }    \n    stat.rate=stat.success/stat.count;\n    stat.last=now;\n}\n\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\nmsg.formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\nmsg.success = stat.success;\nmsg.rate = Math.floor(stat.rate*100);\n\nnode.status({fill:\"blue\",shape:\"ring\",text:\"Frames: \"+msg.success+\" | \"+msg.rate+\"% | Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n\n// Saving data in the context\ncontext.set(\"stat\",stat);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 280,
        "wires": [
            [
                "f6429c1f7c6c18c5",
                "95db4b3d33716fb6",
                "c93d07fbcafa5061"
            ]
        ]
    },
    {
        "id": "c78646108abf9d41",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Reset stat",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 400,
        "wires": [
            [
                "e726fd8cc0685c9b"
            ]
        ]
    },
    {
        "id": "f6429c1f7c6c18c5",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "e16e06ca.f38438",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Last time",
        "label": "Last grab",
        "format": "{{msg.formattedtime}}",
        "layout": "row-spread",
        "x": 881.0000839233398,
        "y": 200.39999198913574,
        "wires": []
    },
    {
        "id": "95db4b3d33716fb6",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "e16e06ca.f38438",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Frame count",
        "label": "Frames grabbed",
        "format": "{{msg.success}}",
        "layout": "row-spread",
        "x": 890.8999900817871,
        "y": 236.1999807357788,
        "wires": []
    },
    {
        "id": "c93d07fbcafa5061",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "e16e06ca.f38438",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Success rate",
        "label": "Success rate",
        "format": "{{msg.rate}} %",
        "layout": "row-spread",
        "x": 891.8999633789062,
        "y": 274.1999740600586,
        "wires": []
    },
    {
        "id": "725d8a55f32c2a98",
        "type": "ui_button",
        "z": "e00b414dd22f5f63",
        "name": "Refresh",
        "group": "675036dd.603328",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Refresh image",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 84.59999084472656,
        "y": 94.13333797454834,
        "wires": [
            [
                "fe26da3894e710ee"
            ]
        ]
    },
    {
        "id": "f965f995241e2635",
        "type": "debug",
        "z": "e00b414dd22f5f63",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 778.0000152587891,
        "y": 1040.0000228881836,
        "wires": []
    },
    {
        "id": "96c05e72480adef3",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 128.00001525878906,
        "y": 1000.0000228881836,
        "wires": [
            [
                "157fa6faa1fd97b0"
            ]
        ]
    },
    {
        "id": "cfab957f51d788e8",
        "type": "exec",
        "z": "e00b414dd22f5f63",
        "command": "ffmpeg -y -i rtsp://admin:Root@1234@10.4.0.222:554 -r 10 -t 30 -y -vcodec copy -an ",
        "addpay": "payload",
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "winHide": false,
        "oldrc": false,
        "name": "Capture video",
        "x": 548.0000152587891,
        "y": 960.0000228881836,
        "wires": [
            [
                "83275e9c15ccb1dc",
                "5505f3325196a13f"
            ],
            [
                "f83b7f6f9f61ee69"
            ],
            [
                "f965f995241e2635",
                "9a0dd355f17a1867"
            ]
        ]
    },
    {
        "id": "83275e9c15ccb1dc",
        "type": "ui_template",
        "z": "e00b414dd22f5f63",
        "group": "cb67921.cf4df7",
        "name": "Video link",
        "order": 2,
        "width": 0,
        "height": 0,
        "format": "<div height=\"70\" style=\"height: 70px;\">\n<a href=\"/video.mp4\" target=\"_blank\">Open video</a>\n</div>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "local",
        "className": "",
        "x": 788.0000152587891,
        "y": 920.0000228881836,
        "wires": [
            []
        ]
    },
    {
        "id": "5505f3325196a13f",
        "type": "debug",
        "z": "e00b414dd22f5f63",
        "name": "",
        "active": true,
        "console": "false",
        "complete": "true",
        "x": 778.0000152587891,
        "y": 960.0000228881836,
        "wires": []
    },
    {
        "id": "f83b7f6f9f61ee69",
        "type": "file",
        "z": "e00b414dd22f5f63",
        "name": "",
        "filename": "avconv.out",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "true",
        "x": 838.0000152587891,
        "y": 1000.0000228881836,
        "wires": [
            []
        ]
    },
    {
        "id": "9a0dd355f17a1867",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Statistics",
        "func": "var now = new Date();\nvar stat = context.get(\"stat\");\nif (stat===undefined) {\n    // Initialize the object in case NR restart\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n}\nif (msg.topic===\"reset\") {\n    // Reset message was received: reset statistics\n    stat = { \"count\": 0, \"success\": 0, \"rate\": 0.0, \"last\": now};\n} else {\n    // Update statistics\n    stat.count++;\n    if (msg.payload.code===0) {\n        stat.success++;\n    }    \n    stat.rate=stat.success/stat.count;\n    stat.last=now;\n}\n\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\nmsg.formattedtime = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;\nmsg.success = stat.success;\nmsg.rate = Math.floor(stat.rate*100);\n\nnode.status({fill:\"blue\",shape:\"ring\",text:\"Videos: \"+msg.success+\" | \"+msg.rate+\"% | Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n\n// Saving data in the context\ncontext.set(\"stat\",stat);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 668.0000152587891,
        "y": 1160.0000228881836,
        "wires": [
            [
                "876fe5361892b63f",
                "e16dbbb867bd994b",
                "3cbaafe8b4bbd780"
            ]
        ]
    },
    {
        "id": "67d3e769cc0e22d6",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Reset stat",
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "reset",
        "payload": "",
        "payloadType": "date",
        "x": 468.00001525878906,
        "y": 1160.0000228881836,
        "wires": [
            [
                "9a0dd355f17a1867"
            ]
        ]
    },
    {
        "id": "876fe5361892b63f",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "984422e9.d6d96",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "Video Last time",
        "label": "Last grab",
        "format": "{{msg.formattedtime}}",
        "layout": "row-spread",
        "x": 888.0000152587891,
        "y": 1080.0000228881836,
        "wires": []
    },
    {
        "id": "e16dbbb867bd994b",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "984422e9.d6d96",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "Video count",
        "label": "Video files",
        "format": "{{msg.success}}",
        "layout": "row-spread",
        "x": 878.0000152587891,
        "y": 1120.0000228881836,
        "wires": []
    },
    {
        "id": "3cbaafe8b4bbd780",
        "type": "ui_text",
        "z": "e00b414dd22f5f63",
        "group": "984422e9.d6d96",
        "order": 3,
        "width": 0,
        "height": 0,
        "name": "Video Success rate",
        "label": "Success rate",
        "format": "{{msg.rate}} %",
        "layout": "row-spread",
        "x": 898.0000152587891,
        "y": 1160.0000228881836,
        "wires": []
    },
    {
        "id": "4653fa4e5eff5db3",
        "type": "ui_button",
        "z": "e00b414dd22f5f63",
        "name": "Capture",
        "group": "cb67921.cf4df7",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Capture video",
        "color": "",
        "bgcolor": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "",
        "x": 112.60000610351562,
        "y": 954.1333608627319,
        "wires": [
            [
                "157fa6faa1fd97b0"
            ]
        ]
    },
    {
        "id": "a610c5272bfecebf",
        "type": "comment",
        "z": "e00b414dd22f5f63",
        "name": "Frame grabber",
        "info": "This section of the flow is responsible for \ngrabbing a single out of the RTSP feed of the IP\nCamera. It uses avconv to do that which is part\nof the libav-tools for raspberry pi.\n\nThe trigger can be an inject, or a UI button.\nThe statistic node keeps a track of the number of\ngrabbed frames and the success rate (when the\nvideo conversion/grabbing was successful). The \nStatistic node also has a reset input which can \nbe used to periodically reset the stats (e.g.\ndaily, weekly).\n\nI directed the second output of the Exec node to\na file, as the output of the avconv is usually \nquite long and if there are errors you don't\nsee the entire output in the debug window, so in\nthat case just open to output and see what the issue\nis.",
        "x": 125.625,
        "y": 36.5000057220459,
        "wires": []
    },
    {
        "id": "d980f33f926660a5",
        "type": "comment",
        "z": "e00b414dd22f5f63",
        "name": "Video capture",
        "info": "This section of the flow captures a fixed length \nvideo of the RTSP feed.\nIt works very similar to the frame capture above,\nthe only main difference is the parameters in the\ncommmand line.",
        "x": 118.00001525878906,
        "y": 900.0000228881836,
        "wires": []
    },
    {
        "id": "fe26da3894e710ee",
        "type": "change",
        "z": "e00b414dd22f5f63",
        "name": "Set filename",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "/home/pi/source/node-red-dev/grab.jpg",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 290,
        "y": 80,
        "wires": [
            [
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "157fa6faa1fd97b0",
        "type": "change",
        "z": "e00b414dd22f5f63",
        "name": "Set filename",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "/home/pi/source/node-red-dev/video.mp4",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 298.00001525878906,
        "y": 960.0000228881836,
        "wires": [
            [
                "cfab957f51d788e8"
            ]
        ]
    },
    {
        "id": "299083a6223fdf73",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Frame grab",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/home/pi/source/node-red-dev/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store\";                                        // Flag to store this image in the DB\nmsg.type = \"timelapse\";                                     // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 380,
        "wires": [
            [
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "943025393a1733e5",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Grab a frame",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 380,
        "wires": [
            [
                "299083a6223fdf73"
            ]
        ]
    },
    {
        "id": "ef72e9b41baf0731",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Video capture",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/home/pi/source/node-red-dev/\";                     // This is the path\nvar filename = \"video_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".mp4\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store\";                                        // Flag to store this image in the DB\nmsg.type = \"videotest\";                                     // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 328.00001525878906,
        "y": 1080.0000228881836,
        "wires": [
            [
                "cfab957f51d788e8"
            ]
        ]
    },
    {
        "id": "97143dfb2b33490e",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 128.00001525878906,
        "y": 1080.0000228881836,
        "wires": [
            [
                "ef72e9b41baf0731"
            ]
        ]
    },
    {
        "id": "7c0fcce0fdf7112b",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Email image",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store|email\";                                  // Flag to store this image in the DB\nmsg.type = \"front\";                                         // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 420,
        "wires": [
            [
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "93238827c0f06d91",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Email a pic",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 420,
        "wires": [
            [
                "7c0fcce0fdf7112b"
            ]
        ]
    },
    {
        "id": "41553e48cdca8777",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Email 3 pics",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "f9151a7b23180477"
            ]
        ]
    },
    {
        "id": "f9151a7b23180477",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "1st img",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"3mail/1|delete\";                               // Flag to store this image in the DB\nmsg.type = \"temp\";                                          // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 460,
        "wires": [
            [
                "e3eb5d35512ffe18",
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "880b442c94be7c9d",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "2st img",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"3mail/2|delete\";                               // Flag to store this image in the DB\nmsg.type = \"temp\";                                          // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 520,
        "wires": [
            [
                "df0eeb5452f24cab",
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "86c8773ef792557e",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "3rd img",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/\";                     // This is the path\nvar filename = \"frame_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"3mail/3|delete\";                               // Flag to store this image in the DB\nmsg.type = \"temp\";                                          // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            [
                "8ce13d405dce0ff5"
            ]
        ]
    },
    {
        "id": "e3eb5d35512ffe18",
        "type": "delay",
        "z": "e00b414dd22f5f63",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 140,
        "y": 520,
        "wires": [
            [
                "880b442c94be7c9d"
            ]
        ]
    },
    {
        "id": "df0eeb5452f24cab",
        "type": "delay",
        "z": "e00b414dd22f5f63",
        "name": "",
        "pauseType": "delay",
        "timeout": "15",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 140,
        "y": 580,
        "wires": [
            [
                "86c8773ef792557e"
            ]
        ]
    },
    {
        "id": "0f702feaae2a486e",
        "type": "inject",
        "z": "e00b414dd22f5f63",
        "name": "Noon timelapse",
        "props": [
            {
                "p": "payload",
                "v": "",
                "vt": "date"
            },
            {
                "p": "topic",
                "v": "",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 138,
        "y": 706,
        "wires": [
            [
                "9ca1d1bdc86ea197"
            ]
        ]
    },
    {
        "id": "9ca1d1bdc86ea197",
        "type": "function",
        "z": "e00b414dd22f5f63",
        "name": "Frame grab",
        "func": "var now = new Date();\n// Create formatted time\nvar yyyy = now.getFullYear();\nvar mm = now.getMonth() < 9 ? \"0\" + (now.getMonth() + 1) : (now.getMonth() + 1); // getMonth() is zero-based\nvar dd  = now.getDate() < 10 ? \"0\" + now.getDate() : now.getDate();\nvar hh = now.getHours() < 10 ? \"0\" + now.getHours() : now.getHours();\nvar mmm  = now.getMinutes() < 10 ? \"0\" + now.getMinutes() : now.getMinutes();\nvar ss  = now.getSeconds() < 10 ? \"0\" + now.getSeconds() : now.getSeconds();\n\n// Last update: \"+dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss});\n\n// file path with / at the end\nvar path = \"/home/pi/source/node-red-dev/\";                     // This is the path\nvar filename = \"noon_\"+yyyy+mm+dd+\"-\"+hh+mm+ss+\".jpg\";     // file name\nmsg.payload = path + filename;                              // pass the full path to payload for the exec node to add to the end of the command\nmsg.file = filename;                                        // To be used later to store the information in the DB\nmsg.path = path;                                            // Same as above\nmsg.wwwpath = \"/\";                                          // Same as above\nmsg.topic = \"store\";                                        // Flag to store this image in the DB\nmsg.type = \"Noon timelapse\";                                     // Image type e.g. Front camera, etc.\nmsg.epoch = now.getTime();                                  // Current timestamp\nmsg.formatteddate = dd + \".\" + mm + \".\" + yyyy + \" \" + hh + \":\" + mmm + \":\" + ss;   // Formatted timestamp to be used later\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 308,
        "y": 706,
        "wires": [
            [
                "8ce13d405dce0ff5"
            ]
        ]
    }
]